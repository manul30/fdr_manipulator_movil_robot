#!/usr/bin/env python3

import rospy
from sensor_msgs.msg import JointState
from markers import *
from funciones import *
import matplotlib.pyplot as plt


rospy.init_node("testInvKine")
pub = rospy.Publisher('joint_states', JointState, queue_size=1000)

bmarker      = BallMarker(color['RED'])
bmarker_des  = BallMarker(color['GREEN'])

# Joint names
jnames = ['Revolucion1', 'Revolucion2', 'Revolucion3','Revolucion4', 'Revolucion5', 'Revolucion6']

# Desired position
xd = np.array([-0.03, 0.125, 0.749])
# Initial configuration
q0 = np.array([0.0, -1.0, 1.7, -2.2, -1.6, 0.0])
# Inverse kinematics
q,e = ikine_kr4(xd, q0)

# Gráfico del error (debe ser decreciente)
plt.plot(e,'b')
plt.plot(e,'b.')
plt.title("Evolución del error"); plt.grid()
plt.xlabel("Número de iteraciones"); plt.ylabel("Norma del error")
plt.show()

# Resulting position (end effector with respect to the base link)
T = fkine_kuka_kr4(q)
print('Obtained value:\n', np.round(T,3))

# Red marker shows the achieved position
bmarker.xyz(T[0:3,3])
# Green marker shows the desired position
bmarker_des.xyz(xd)

# Objeto (mensaje) de tipo JointState
jstate = JointState()
# Asignar valores al mensaje
jstate.header.stamp = rospy.Time.now()
jstate.name = jnames
# Add the head joint value (with value 0) to the joints
jstate.position = q

# Loop rate (in Hz)
rate = rospy.Rate(100)
# Continuous execution loop
while not rospy.is_shutdown():
    # Current time (needed for ROS)
    jstate.header.stamp = rospy.Time.now()
    # Publish the message
    pub.publish(jstate)
    bmarker.publish()
    bmarker_des.publish()
    # Wait for the next iteration
    rate.sleep()
